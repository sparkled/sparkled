plugins {
    id("org.jetbrains.kotlin.jvm") version "$kotlinVersion"
    id("org.jetbrains.kotlin.kapt") version "$kotlinVersion"
    id("com.github.johnrengelman.shadow") version "7.0.0"
    id("io.micronaut.application") version "1.5.4"
    id("org.jetbrains.kotlin.plugin.allopen") version "$kotlinVersion"
}

allprojects { project ->
    version '0.2.0'
    group 'io.sparkled'

    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "org.jetbrains.kotlin.kapt"
    apply plugin: "org.jetbrains.kotlin.plugin.allopen"

    repositories {
        mavenCentral()
    }

    micronaut {
        runtime("netty")
        testRuntime("kotest")
        processing {
            incremental(true)
            annotations("io.sparkled.*")
        }
    }

    dependencies {
        implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
        testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
        kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
        kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")

        implementation "io.micronaut:micronaut-spring:2.0.1"
        implementation "io.micronaut:micronaut-runtime"

        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesVersion"

        // Kotlin runtime scripting.
        implementation 'org.jetbrains.kotlin:kotlin-script-runtime'
        implementation 'org.jetbrains.kotlin:kotlin-compiler-embeddable'
        implementation 'org.jetbrains.kotlin:kotlin-script-util'
        implementation 'net.java.dev.jna:jna:5.6.0'
        runtimeOnly 'org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable'

        implementation "io.micronaut:micronaut-inject-java"
        kapt "io.micronaut:micronaut-inject-java"
        kaptTest "io.micronaut:micronaut-inject-java"

        implementation "io.micronaut.spring:micronaut-spring-annotation"
        implementation "org.springframework:spring-jdbc"

        runtimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
        implementation "com.fasterxml.jackson.module:jackson-module-kotlin"

        testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
        testImplementation "io.mockk:mockk:1.11.0"
        testImplementation "io.kotest:kotest-runner-junit5:4.4.3"
        testImplementation "io.kotest:kotest-assertions-core:4.4.3"
    }

    jar {
        manifest {
            attributes(
                    "Implementation-Title": "Sparkled",
                    "Implementation-Version": project.version
            )
        }
    }

    test {
        useJUnitPlatform()
    }

    tasks {
        compileKotlin {
            kotlinOptions {
                jvmTarget = "11"
            }
        }
        compileTestKotlin {
            kotlinOptions {
                jvmTarget = "11"
            }
        }
    }
}

application {
    mainClass.set('io.sparkled.app.Main')
}

configurations {
    ktlint
    e2eTestImplementation.extendsFrom testImplementation
    e2eTestRuntime.extendsFrom testRuntime
}

sourceSets {
    e2eTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/e2e-test/kotlin')
        }
        resources.srcDir file('src/e2e-test/resources')
    }
}

compileE2eTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
    }
}

shadowJar {
    mergeServiceFiles()
    archiveVersion.set('')
}

dependencies {
    implementation project(':model')
    implementation project(':persistence')
    implementation project(':renderer')
    implementation project(':rest')
    implementation project(':scheduler')
    implementation project(':udp-server')
    implementation 'io.micronaut.sql:micronaut-jdbc-hikari'
    implementation 'io.micronaut.sql:micronaut-jdbi'
    implementation "io.micronaut.liquibase:micronaut-liquibase"
    implementation "org.xerial:sqlite-jdbc:$sqliteVersion"

    e2eTestImplementation project(":model")
    e2eTestImplementation project(":music-player")
    e2eTestImplementation project(":persistence")
    e2eTestImplementation "io.micronaut.spring:micronaut-spring-annotation"
    e2eTestImplementation "org.springframework:spring-jdbc"
    e2eTestImplementation "io.micronaut.liquibase:micronaut-liquibase"
    e2eTestImplementation "io.micronaut:micronaut-http-client"

    ktlint "com.pinterest:ktlint:$ktlintVersion" // TODO use plugin
}

task e2eTest(type: Test) {
    group = "verification"
    testClassesDirs = sourceSets.e2eTest.output.classesDirs
    classpath = sourceSets.e2eTest.runtimeClasspath
}

e2eTest {
    useJUnitPlatform()
}

task ktlintConfigure(type: JavaExec, group: 'formatting') {
    description = 'Use ktlint formatting in IntelliJ project.'
    classpath = configurations.ktlint
    main = 'com.pinterest.ktlint.Main'
    args '--apply-to-idea-project', '-y'
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = 'Fix Kotlin code style deviations.'
    classpath = configurations.ktlint
    main = 'com.pinterest.ktlint.Main'
    args '-F', '**/*.kt'
}

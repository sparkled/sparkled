package io.sparkled.renderer.effect

import io.sparkled.model.animation.param.Param
import io.sparkled.renderer.api.SemVer
import io.sparkled.renderer.api.SparkledEffect
import io.sparkled.renderer.api.RenderContext
import io.sparkled.renderer.util.FillUtils
import io.sparkled.renderer.util.ParamUtils
import kotlin.random.Random

/**
 * Random flickering lights with adjustable lifetime and density.
 */
object GlitterEffect : SparkledEffect<Unit> {
    
    enum class Params { DENSITY, LIFETIME, RANDOM_SEED }

    override val id = "@sparkled/glitter"
    override val name = "Glitter"
    override val version = SemVer(1, 0, 0)
    override val params = listOf(
        Param.int(Params.DENSITY.name, "Density (%)", 50),
        Param.decimal(Params.LIFETIME.name, "Lifetime", 1.0),
        Param.int(Params.RANDOM_SEED.name, "Random Seed", 1),
    )

    override fun createState(ctx: RenderContext) {}

    override fun render(ctx: RenderContext, state: Unit) {
        val density = ParamUtils.getInt(ctx.effect, Params.DENSITY.name, 10) / 100f
        val patternIndex = (density * (patterns.size - 1)).toInt()
        val lifetime = ParamUtils.getFloat(ctx.effect, Params.LIFETIME.name, 1f)
        val lifetimeFrames = (ctx.sequence.getFramesPerSecond()!! * lifetime).toInt()

        val random = Random(ParamUtils.getInt(ctx.effect, Params.RANDOM_SEED.name, 1))
        val frameCount = ctx.effect.endFrame - ctx.effect.startFrame + 1
        val fadeAlpha = getFadeAlpha(ctx, lifetimeFrames)

        for (i in 0 until ctx.ledCount) {
            var alpha = 0f
            if (lifetimeFrames > 0) {
                val pattern = patterns[patternIndex]
                val patternStart = random.nextInt(BITS_PER_PATTERN)
                val offset = random.nextInt(lifetimeFrames)

                val offsetFrameNumber = ctx.progress * frameCount + offset

                val bit = ((offsetFrameNumber / lifetimeFrames.toFloat()) + patternStart).toInt() % BITS_PER_PATTERN
                val isOn = pattern and (1 shl bit).toLong() != 0L
                val progress = if (!isOn) 0f else (offsetFrameNumber % lifetimeFrames) / lifetimeFrames.toFloat()

                // Linear flash over lifetime of glitter particle.
                alpha = 2 * if (progress < .5) progress else 1 - progress
            }

            FillUtils.fill(ctx, i, alpha * fadeAlpha)
        }
    }

    /**
     * Fade all particles in at the start of the effect, and fade them out at the end.
     */
    private fun getFadeAlpha(ctx: RenderContext, lifetimeFrames: Int): Float {
        val totalFrames = ctx.effect.endFrame - ctx.effect.startFrame + 1
        val elapsedFrames = ctx.progress * (totalFrames)
        val framesLeft = totalFrames - elapsedFrames

        return when {
            elapsedFrames < lifetimeFrames -> elapsedFrames / lifetimeFrames.toFloat()
            framesLeft < lifetimeFrames -> framesLeft / lifetimeFrames.toFloat()
            else -> 1f
        }
    }

    private const val BITS_PER_PATTERN = 63

    /**
     * These randomly generated 63-bit density patterns define the frequency at which particles should appear.
     */
    private val patterns = arrayOf(
        0b000000000000000000000000000000000000000000000000000000000000000,
        0b000000000000000000000000000000000000000001000000000000000000000,
        0b000000100000000000000000000000000000000000100000000000000000000,
        0b000000000000000001000000000000000010000000000000000100000000000,
        0b000000000000000000000000100000100001000000001000000000000000000,
        0b000000000000001000000000010000000000110000000000000000000001000,
        0b000000000001000000000100000000010000000000100000100100000000000,
        0b001000000000010000000100000000000100000000000000000000010100010,
        0b010000000001000000010010000000000010000001000000001010000000000,
        0b000000000001100000000000000000001010000001000100000000000011001,
        0b000000000001000010000000000011011001000000010000000000101000000,
        0b000100000000100000010010000110000000000000000010000010110000010,
        0b001001001000010000100001100000001000000000000000010001000001010,
        0b000000101000000000001000011010000100000001000001001100001000100,
        0b001000000000100001000001010100011000110000100000100100000000010,
        0b010110000011000010000100000000010010100000000010010000010011000,
        0b000011011000010000000000000011011001000110100100000000110000000,
        0b011010001000000000000010000001000110011010100010101001000010000,
        0b011010001000000100000111100000100000101000010000001100100011000,
        0b000111111000101000011010000001000000100100010001010000001000010,
        0b000000000100010010110100001101100100100010000011100100011100000,
        0b010010001000111000111010100000011110000100001000100100100000001,
        0b011010100001000000000100110010010010100110010100000011110010010,
        0b100010101111000000000001101011000001010011000010000101100110100,
        0b110001110101100011000010101011100011000000000100000110010000011,
        0b010010001001011010010011010100010010000111011001110010101000000,
        0b101100011101100000010010100000000100001001111100101111000110010,
        0b000110111000010001001011000111001011101010000000110000100111110,
        0b010110011010001000100100010000111111010110110000100001100110011,
        0b001100110010101101010000010100011110011100100011100000011101110,
        0b111001001001100011101100011011111000101001010110011011000000010,
        0b000110010001100101110110101100000110111110011101011000010011100,
        0b000110010100101011001111111001100101010001110010011000101110011,
        0b000110111110100010011100010011101110001010001110010110001111110,
        0b101000011100110101110111011101110001110011000101000011101000111,
        0b100000010100011111111100001000011011101000110111101011111101101,
        0b001011010110011110101100110110011110111001110001100010011110011,
        0b011101110101101110011110001011110100001111101100110110110100001,
        0b111111111101111001011100011100100001011110001110110001011001110,
        0b111110111101001110000111101011000101011010101110110111110001011,
        0b010110101111111111110011001011110100100000111111011011110001110,
        0b011001111001011101101101101101110011110110111101101101101011010,
        0b111111110111110010101111100110101011000101111111101110110010010,
        0b111100110011001100110101101110111010111111111101111111111000010,
        0b011111001111101110111001111011011101111110111011001011001111010,
        0b011010111001000111001111111111011011100011011111111111111111001,
        0b101111011001111110111010111110011100010111110111100011111111111,
        0b100111111111010001011111100011011111111011111111111101101110110,
        0b111110110111111110001011111011000110010111111111101111111111011,
        0b110001011101011111111101111111111111111111100111100110110111101,
        0b011001111111111011111111101011011101111111111111000111111011110,
        0b111111110011110111101111111110010110111110111111110111111010111,
        0b011011101101011111111101111111011111111111111011111110011101111,
        0b111111101111010111111110111111101111111111011111110100111111101,
        0b111111111011010011111101111111111110111111101111111101111110111,
        0b111111101110101111111111011111110110011111111111111101111111111,
        0b011111111111111111111101111111101111110111111111011111111110101,
        0b111111111111111111111111111111011111111111011101101101111101111,
        0b111111111111111110111111111111011011111111111011111111111111110,
        0b111011111111111110111111111011111111111110111111111111111111111,
        0b111111111111111111111111111111111111111111111101111100111111111,
        0b111111111111111111111111101111111111101111111111111111111111111,
        0b111111111111111111111111111111111101111111111111111111111111111,
        0b111111111111111111111111111111111111111111111111111111111111111
    )
}
